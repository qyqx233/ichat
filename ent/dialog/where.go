// Code generated by ent, DO NOT EDIT.

package dialog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/qyqx233/chat-go-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldID, id))
}

// Sid applies equality check predicate on the "sid" field. It's identical to SidEQ.
func Sid(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldSid, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldUser, v))
}

// Assistant applies equality check predicate on the "assistant" field. It's identical to AssistantEQ.
func Assistant(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldAssistant, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldCreatedAt, v))
}

// SidEQ applies the EQ predicate on the "sid" field.
func SidEQ(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldSid, v))
}

// SidNEQ applies the NEQ predicate on the "sid" field.
func SidNEQ(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldSid, v))
}

// SidIn applies the In predicate on the "sid" field.
func SidIn(vs ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldSid, vs...))
}

// SidNotIn applies the NotIn predicate on the "sid" field.
func SidNotIn(vs ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldSid, vs...))
}

// SidGT applies the GT predicate on the "sid" field.
func SidGT(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldSid, v))
}

// SidGTE applies the GTE predicate on the "sid" field.
func SidGTE(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldSid, v))
}

// SidLT applies the LT predicate on the "sid" field.
func SidLT(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldSid, v))
}

// SidLTE applies the LTE predicate on the "sid" field.
func SidLTE(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldSid, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasSuffix(FieldUser, v))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContainsFold(FieldUser, v))
}

// AssistantEQ applies the EQ predicate on the "assistant" field.
func AssistantEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldAssistant, v))
}

// AssistantNEQ applies the NEQ predicate on the "assistant" field.
func AssistantNEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldAssistant, v))
}

// AssistantIn applies the In predicate on the "assistant" field.
func AssistantIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldAssistant, vs...))
}

// AssistantNotIn applies the NotIn predicate on the "assistant" field.
func AssistantNotIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldAssistant, vs...))
}

// AssistantGT applies the GT predicate on the "assistant" field.
func AssistantGT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldAssistant, v))
}

// AssistantGTE applies the GTE predicate on the "assistant" field.
func AssistantGTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldAssistant, v))
}

// AssistantLT applies the LT predicate on the "assistant" field.
func AssistantLT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldAssistant, v))
}

// AssistantLTE applies the LTE predicate on the "assistant" field.
func AssistantLTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldAssistant, v))
}

// AssistantContains applies the Contains predicate on the "assistant" field.
func AssistantContains(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContains(FieldAssistant, v))
}

// AssistantHasPrefix applies the HasPrefix predicate on the "assistant" field.
func AssistantHasPrefix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasPrefix(FieldAssistant, v))
}

// AssistantHasSuffix applies the HasSuffix predicate on the "assistant" field.
func AssistantHasSuffix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasSuffix(FieldAssistant, v))
}

// AssistantEqualFold applies the EqualFold predicate on the "assistant" field.
func AssistantEqualFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEqualFold(FieldAssistant, v))
}

// AssistantContainsFold applies the ContainsFold predicate on the "assistant" field.
func AssistantContainsFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContainsFold(FieldAssistant, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasSuffix(FieldError, v))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContainsFold(FieldError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dialog) predicate.Dialog {
	return predicate.Dialog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dialog) predicate.Dialog {
	return predicate.Dialog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dialog) predicate.Dialog {
	return predicate.Dialog(func(s *sql.Selector) {
		p(s.Not())
	})
}
