// Code generated by ent, DO NOT EDIT.

package dialog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/qyqx233/chat-go-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldID, id))
}

// Sid applies equality check predicate on the "sid" field. It's identical to SidEQ.
func Sid(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldSid, v))
}

// Q applies equality check predicate on the "q" field. It's identical to QEQ.
func Q(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldQ, v))
}

// A applies equality check predicate on the "a" field. It's identical to AEQ.
func A(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldA, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldCreatedAt, v))
}

// SidEQ applies the EQ predicate on the "sid" field.
func SidEQ(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldSid, v))
}

// SidNEQ applies the NEQ predicate on the "sid" field.
func SidNEQ(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldSid, v))
}

// SidIn applies the In predicate on the "sid" field.
func SidIn(vs ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldSid, vs...))
}

// SidNotIn applies the NotIn predicate on the "sid" field.
func SidNotIn(vs ...int) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldSid, vs...))
}

// SidGT applies the GT predicate on the "sid" field.
func SidGT(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldSid, v))
}

// SidGTE applies the GTE predicate on the "sid" field.
func SidGTE(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldSid, v))
}

// SidLT applies the LT predicate on the "sid" field.
func SidLT(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldSid, v))
}

// SidLTE applies the LTE predicate on the "sid" field.
func SidLTE(v int) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldSid, v))
}

// QEQ applies the EQ predicate on the "q" field.
func QEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldQ, v))
}

// QNEQ applies the NEQ predicate on the "q" field.
func QNEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldQ, v))
}

// QIn applies the In predicate on the "q" field.
func QIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldQ, vs...))
}

// QNotIn applies the NotIn predicate on the "q" field.
func QNotIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldQ, vs...))
}

// QGT applies the GT predicate on the "q" field.
func QGT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldQ, v))
}

// QGTE applies the GTE predicate on the "q" field.
func QGTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldQ, v))
}

// QLT applies the LT predicate on the "q" field.
func QLT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldQ, v))
}

// QLTE applies the LTE predicate on the "q" field.
func QLTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldQ, v))
}

// QContains applies the Contains predicate on the "q" field.
func QContains(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContains(FieldQ, v))
}

// QHasPrefix applies the HasPrefix predicate on the "q" field.
func QHasPrefix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasPrefix(FieldQ, v))
}

// QHasSuffix applies the HasSuffix predicate on the "q" field.
func QHasSuffix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasSuffix(FieldQ, v))
}

// QEqualFold applies the EqualFold predicate on the "q" field.
func QEqualFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEqualFold(FieldQ, v))
}

// QContainsFold applies the ContainsFold predicate on the "q" field.
func QContainsFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContainsFold(FieldQ, v))
}

// AEQ applies the EQ predicate on the "a" field.
func AEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldA, v))
}

// ANEQ applies the NEQ predicate on the "a" field.
func ANEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldA, v))
}

// AIn applies the In predicate on the "a" field.
func AIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldA, vs...))
}

// ANotIn applies the NotIn predicate on the "a" field.
func ANotIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldA, vs...))
}

// AGT applies the GT predicate on the "a" field.
func AGT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldA, v))
}

// AGTE applies the GTE predicate on the "a" field.
func AGTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldA, v))
}

// ALT applies the LT predicate on the "a" field.
func ALT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldA, v))
}

// ALTE applies the LTE predicate on the "a" field.
func ALTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldA, v))
}

// AContains applies the Contains predicate on the "a" field.
func AContains(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContains(FieldA, v))
}

// AHasPrefix applies the HasPrefix predicate on the "a" field.
func AHasPrefix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasPrefix(FieldA, v))
}

// AHasSuffix applies the HasSuffix predicate on the "a" field.
func AHasSuffix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasSuffix(FieldA, v))
}

// AEqualFold applies the EqualFold predicate on the "a" field.
func AEqualFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEqualFold(FieldA, v))
}

// AContainsFold applies the ContainsFold predicate on the "a" field.
func AContainsFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContainsFold(FieldA, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldHasSuffix(FieldError, v))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Dialog {
	return predicate.Dialog(sql.FieldContainsFold(FieldError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Dialog {
	return predicate.Dialog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dialog) predicate.Dialog {
	return predicate.Dialog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dialog) predicate.Dialog {
	return predicate.Dialog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dialog) predicate.Dialog {
	return predicate.Dialog(func(s *sql.Selector) {
		p(s.Not())
	})
}
