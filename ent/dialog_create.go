// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/qyqx233/chat-go-api/ent/dialog"
)

// DialogCreate is the builder for creating a Dialog entity.
type DialogCreate struct {
	config
	mutation *DialogMutation
	hooks    []Hook
}

// SetSid sets the "sid" field.
func (dc *DialogCreate) SetSid(i int) *DialogCreate {
	dc.mutation.SetSid(i)
	return dc
}

// SetQ sets the "q" field.
func (dc *DialogCreate) SetQ(s string) *DialogCreate {
	dc.mutation.SetQ(s)
	return dc
}

// SetNillableQ sets the "q" field if the given value is not nil.
func (dc *DialogCreate) SetNillableQ(s *string) *DialogCreate {
	if s != nil {
		dc.SetQ(*s)
	}
	return dc
}

// SetA sets the "a" field.
func (dc *DialogCreate) SetA(s string) *DialogCreate {
	dc.mutation.SetA(s)
	return dc
}

// SetNillableA sets the "a" field if the given value is not nil.
func (dc *DialogCreate) SetNillableA(s *string) *DialogCreate {
	if s != nil {
		dc.SetA(*s)
	}
	return dc
}

// SetError sets the "error" field.
func (dc *DialogCreate) SetError(s string) *DialogCreate {
	dc.mutation.SetError(s)
	return dc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (dc *DialogCreate) SetNillableError(s *string) *DialogCreate {
	if s != nil {
		dc.SetError(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DialogCreate) SetCreatedAt(t time.Time) *DialogCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DialogCreate) SetNillableCreatedAt(t *time.Time) *DialogCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// Mutation returns the DialogMutation object of the builder.
func (dc *DialogCreate) Mutation() *DialogMutation {
	return dc.mutation
}

// Save creates the Dialog in the database.
func (dc *DialogCreate) Save(ctx context.Context) (*Dialog, error) {
	dc.defaults()
	return withHooks[*Dialog, DialogMutation](ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DialogCreate) SaveX(ctx context.Context) *Dialog {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DialogCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DialogCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DialogCreate) defaults() {
	if _, ok := dc.mutation.Q(); !ok {
		v := dialog.DefaultQ
		dc.mutation.SetQ(v)
	}
	if _, ok := dc.mutation.A(); !ok {
		v := dialog.DefaultA
		dc.mutation.SetA(v)
	}
	if _, ok := dc.mutation.Error(); !ok {
		v := dialog.DefaultError
		dc.mutation.SetError(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := dialog.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DialogCreate) check() error {
	if _, ok := dc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "Dialog.sid"`)}
	}
	if _, ok := dc.mutation.Q(); !ok {
		return &ValidationError{Name: "q", err: errors.New(`ent: missing required field "Dialog.q"`)}
	}
	if _, ok := dc.mutation.A(); !ok {
		return &ValidationError{Name: "a", err: errors.New(`ent: missing required field "Dialog.a"`)}
	}
	if _, ok := dc.mutation.Error(); !ok {
		return &ValidationError{Name: "error", err: errors.New(`ent: missing required field "Dialog.error"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Dialog.created_at"`)}
	}
	return nil
}

func (dc *DialogCreate) sqlSave(ctx context.Context) (*Dialog, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DialogCreate) createSpec() (*Dialog, *sqlgraph.CreateSpec) {
	var (
		_node = &Dialog{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dialog.Table, sqlgraph.NewFieldSpec(dialog.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.Sid(); ok {
		_spec.SetField(dialog.FieldSid, field.TypeInt, value)
		_node.Sid = value
	}
	if value, ok := dc.mutation.Q(); ok {
		_spec.SetField(dialog.FieldQ, field.TypeString, value)
		_node.Q = value
	}
	if value, ok := dc.mutation.A(); ok {
		_spec.SetField(dialog.FieldA, field.TypeString, value)
		_node.A = value
	}
	if value, ok := dc.mutation.Error(); ok {
		_spec.SetField(dialog.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(dialog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// DialogCreateBulk is the builder for creating many Dialog entities in bulk.
type DialogCreateBulk struct {
	config
	builders []*DialogCreate
}

// Save creates the Dialog entities in the database.
func (dcb *DialogCreateBulk) Save(ctx context.Context) ([]*Dialog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dialog, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DialogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DialogCreateBulk) SaveX(ctx context.Context) []*Dialog {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DialogCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DialogCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
